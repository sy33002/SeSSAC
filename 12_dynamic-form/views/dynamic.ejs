<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic form</title>

    <!-- jquery cdn -->
    <script src="https://code.jquery.com/jquery-3.7.0.min.js" 
    integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" 
    crossorigin="anonymous"></script>
    <!-- axios cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <h1>dynamic form!</h1>
    <form action="" name="register">
        <label for="name">이름</label>
        <input type="text" id="name" name="name" required/>
        <br/>
        성별
        <input type="radio" name="gender" value="m" id="male" required/>
        <label for="male">남</label>
        <input type="radio" name="gender" value="f" id="female"/>
        <label for="female">여</label>
        <br/>
        <br/>
    
        <button type="button" onclick="ajaxGet();">Ajax Get 제출</button>
        <button type="button" onclick="ajaxPost();">Ajax Post 제출</button>
        <br/>
        <button type="button" onclick="axiosGet();">Axios Get 제출 (+ form validation)</button>
        <button type="button" onclick="axiosPost();">Axios POST 제출</button>
        <br/>
        <button type="button" onclick="fetchGet();">fetch Get 제출</button>
        <button type="button" onclick="fetchPost();">fetch POST 제출</button>
        <button type="button" onclick="changeImg();">랜덤</button>
        <div class="result"></div>
        <br/>
        <h1>OPEN API를 이용해 고양이 사진 랜덤 돌리기!</h1>
        <br/>
        <img
            width="500"
            height="500"
            src="https://w7.pngwing.com/pngs/633/239/png-transparent-mario-mario.png"
            alt="고양이"
        />
    </form>
    <!-- 동적폼 전송 결과를 보여줄 곳 -->
    
    <script>
        // frontend javascript
        const img = document.querySelector('img');

        async function changeImg() {
            const res = await axios({
                method: 'get',
                url: 'https://api.thecatapi.com/v1/images/search'
            });
            const { data } = res;
            img.src = data[0].url; // img 태그의 src속성을 open api에서 받아온 랜덤 이미지 주소로 변경
        }

        const resultBox = document.querySelector('div.result'); //전역변수로 div를 선택함

        function ajaxGet(){
            console.log('ajaxGet 함수 호출!');

            const form = document.forms['register'];
            console.dir(form);
            console.dir(form.gender);
            console.dir(form.name.value);
            console.dir(form.gender.value);
            
            // 요청에 실어서 보낼 데이터 변수(서버에서 받은 정보)
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };

            // Ajax로 서버에 Get요청 보내기
            $.ajax({
                type: 'get', // 요청의 종류 (=form의 method 속성)
                url: '/ajax', // 요청의 경로 (=form의 action 속성)
                data: data, // 요청에 실어보낼 데이터(서버가 받게 될 데이터)
                success: function(data){
                    // 요청이 성공적으로 수행되었을 때 실행할 함수
                    console.log(data);
                    resultBox.textContent = `Get/ ajax 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;//jquery를 통해 div의 텍스트 바꿈
                },
            });
        }
        function ajaxPost(){
            console.log('ajaxPost 함수 호출!');

            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            }
            $.ajax({
                type: 'post',
                url:'/ajax',
                data: data,
                success: function(data){
                    console.log(data);
                    resultBox.textContent = `POST/ ajax 요청 완료! ${data.name}님은 ${data.gender}이시죠?`;
                },
            });
        }
    
        // axios 요청의 결과는 Promise 객체
        // -> then, catch 메서드로 체이닝이 가능!
        // -> async, await 도 사용할 수 있음!
        // 퀴즈 2. axios 요청 처리 async/await 로 변경!
        async function axiosGet() {
            console.log('axiosGet 함수 호출!');
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };
            // checkValidity()
            console.log(form.name.checkValidity());
            console.log(form.gender[0].checkValidity());
            console.log(form.gender[1].checkValidity());
            try{
                // 폼 유효성 검사
                // name input에 입력된 값이 없다면 '이름을 입력해주세요!' 출력
                // gender radio btn 을 선택하지 않았다면, '성별을 선택해주세요!' 출력
                // 둘 다 입력이 잘 되었다면, axios로 back에 요청 날리기
                if (!form.name.checkValidity()){
                    resultBox.textContent = `이름을 입력해주세요!`;
                } else if (!form.gender[0].checkValidity()){
                    resultBox.textContent = `성별을 선택해주세요!`;
                } else {
                    const response = await axios({
                    method: 'get', // 요청 방식 (= form method 속성)
                    url: '/axios', // 요청 경로 (= form action 속성)
                    params: data, // 서버로 보낼 데이터 (query string)
                    });
                    const {name, gender} = response.data; // 객체 구조분해 할당
                    resultBox.textContent = `GET /axios 요청 완료!! ${name}님은 ${gender}이시군요!`;
                }
            } catch (error) {
                console.log('Error!', error);
                resultBox.textContent = `알 수 없는 에러 발생!`;
            };               
        }
        async function axiosPost() {
            console.log('axiosPOST 함수 호출!');
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            };
            const response = await axios({
                method: 'post',
                url: '/axios',
                data: data,
            });
            
            try {
                const {name, gender} = response.data; // 객체 구조분해 할당
                resultBox.textContent = `POST /axios 요청 완료!! ${name}님은 ${gender}이시군요!`;
            } catch (error) {
                console.log('Error!', error);
                resultBox.textContent = `알 수 없는 오류 발생!`;
            }
        }
        
        // fetch(url, options)
        function fetchGet (){
            console.log('fetchGet 함수 호출!');

            const form = document.forms['register'];
            // fetch는 get 방식이 기본으로 작동, 생략 가능
            fetch( `/fetch?name=${form.name.value}&gender=${form.gender.value}`, { method : 'get'}
            ).then(function (response) { // fetch도 promise로 반환
                console.log(response);
                return response.json();
                // JSON 형태로 응답 데이터를 전달 받음, 응답(response) 객체는 json() 메서드를 제공
                // 응답(response) 객체로부터 JSON 포맷의 응답 전문을 자바스크립트 객체(js obj)로 변환
            }).then(function(data) { // data = 직전 then 메서드의 return 값
                console.log(data);
                resultBox.textContent = `GET / fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?`;
            });
        }

        function fetchPost (){
            console.log('fetchPost 함수 호출!');
            const form = document.forms['register'];
            const data = {
                name: form.name.value,
                gender: form.gender.value,
            }; // 서버에 넘겨줄 데이터
            
            // fetch 를 이용해 post 요청을 날릴 때에는 option 객체가 반드시 필요함!
            // 1. method 키 post 지정
            // 2. headers 키 JSON 포멧 사용 선언
            // 3. body 키 서버로 보낼 데이터
            fetch( '/fetch',
                { method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON. stringify(data),
                // data: js obj
                // JSON.stringify(data): js obj -> json
            }).then((response)=> {
                console.log(response);
                return response.json();
            }).then((response) => {
                console.log(data);
                resultBox.textContent = `POST /fetch 요청 완료!! ${data.name}님은 ${data.gender}이시죠?`;
            });
            }  

    </script>
</body>
</html>

<!-- 일반 폼 전송 vs 동적 폼 전송 -->
<!-- 
    일반 폼 전송
    - form 태그 안에 button type = submit
    - 제출 되었을 때 다른 페이지로 이동

    동적 폼 전송
    - form 태그 필요 없음, button type = button
    - 제출 되었을 때 현재 경로에서 요청에 대한 결과를 받음
    (물론 자바스크립트 코드를 이용해 결과를 받은 후에 다른 페이지로 이동 가능)
 -->